import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import React, { useState, useEffect, useRef } from 'react';

// S·ª≠a l·ªói: Lo·∫°i b·ªè ƒëu√¥i .jsx kh·ªèi c√°c import c·ª•c b·ªô
import Layout from "./components/Layout";
import LoginPage from "./pages/Common/DangNhap";
import Dashboard from "./pages/Admin/Dashboard";
import QuanLyHocSinh from "./pages/Admin/QuanLyHocSinh";
import QuanLyTaiXe from "./pages/Admin/QuanLyTaiXe";
import QuanLyXeBus from "./pages/Admin/QuanLyXeBus";
import TheoDoiXeBuyt from "./pages/Parent/TheoDoiXeBuyt";
import ThongBao from "./pages/Common/ThongBao";
import QuanLyLichTrinh from "./pages/Admin/QuanLyLichTrinh";
import XemLichTrinh from "./pages/Driver/XemLichTrinh";
import QuanLyTram from "./pages/Admin/QuanLyTram";
import QuanLyTuyenDuong from "./pages/Admin/QuanLyTuyenDuong";
import ThongTinPhuHuynh from "./pages/Parent/ThongTinPhuHuynh";
import GuiThongBao from "./pages/Admin/GuiThongBao";
import DiemDanhHocSinh from "./pages/Driver/DiemDanhHocSinh";

function App() {
  const [currentUser, setCurrentUser] = useState(null);
  const [notifications, setNotifications] = useState([]);
  // S·ª≠ d·ª•ng useRef ƒë·ªÉ l∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng WebSocket
  const ws = useRef(null);

  useEffect(() => {
    // T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p n·∫øu c√≥ th√¥ng tin trong localStorage
    try {
      const storedUser = localStorage.getItem('user');
      if (storedUser) {
        setCurrentUser(JSON.parse(storedUser));
      }
    } catch (error) {
      console.error("Failed to parse user from localStorage", error);
      localStorage.removeItem('user');
    }
  }, []);

  // Thi·∫øt l·∫≠p k·∫øt n·ªëi WebSocket khi user ƒëƒÉng nh·∫≠p
  useEffect(() => {
    // Ch·ªâ k·∫øt n·ªëi n·∫øu c√≥ user v√† ch∆∞a c√≥ k·∫øt n·ªëi WebSocket n√†o ƒëang m·ªü ho·∫∑c ƒëang k·∫øt n·ªëi
    if (currentUser && (!ws.current || ws.current.readyState === WebSocket.CLOSED)) {
      // Thay ƒë·ªïi ƒë·ªãa ch·ªâ ws://localhost:3000 n·∫øu backend ch·∫°y ·ªü port/host kh√°c
      const websocketUrl = 'ws://localhost:3000';
      console.log(`üîå Attempting to connect WebSocket to ${websocketUrl}`);
      // T·∫°o k·∫øt n·ªëi WebSocket m·ªõi v√† g√°n v√†o ws.current
      const newWs = new WebSocket(websocketUrl);

      newWs.onopen = () => {
        console.log('‚úÖ WebSocket Connected');
        // G·ª≠i th√¥ng tin user l√™n server ƒë·ªÉ x√°c th·ª±c
        newWs.send(JSON.stringify({ 
          type: 'authenticate', 
          userId: currentUser.id_nguoi_dung 
        }));
      };

      newWs.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          console.log('üì® Message from server:', message);

          // X√°c nh·∫≠n x√°c th·ª±c th√†nh c√¥ng
          if (message.type === 'authenticated') {
            console.log(`‚úÖ Authenticated as user ID: ${message.userId}`);
          }

          // X·ª≠ l√Ω th√¥ng b√°o m·ªõi
          if (message.type === 'NEW_NOTIFICATION') {
            const newNotification = message.payload;
            // Hi·ªÉn th·ªã th√¥ng b√°o (v√≠ d·ª• d√πng alert, ho·∫∑c toast library)
            alert(`Th√¥ng b√°o m·ªõi: ${newNotification.tieu_de}\n${newNotification.noi_dung}`);
            // C·∫≠p nh·∫≠t state ƒë·ªÉ hi·ªÉn th·ªã ·ªü ƒë√¢u ƒë√≥ n·∫øu c·∫ßn
            setNotifications(prev => [newNotification, ...prev]);
          }
          // X·ª≠ l√Ω c√°c lo·∫°i message kh√°c n·∫øu c√≥
        } catch (error) {
          console.error('Failed to parse message or handle incoming message:', error);
        }
      };

      newWs.onclose = (event) => {
        console.log(`‚ùå WebSocket Disconnected: ${event.code} ${event.reason}`);
        // Ch·ªâ reset ref n·∫øu k·∫øt n·ªëi hi·ªán t·∫°i ch√≠nh l√† k·∫øt n·ªëi ƒë√£ ƒë√≥ng
        if (ws.current === newWs) {
             ws.current = null;
        }
        // C√≥ th·ªÉ th√™m logic reconnect ·ªü ƒë√¢y n·∫øu mu·ªën
      };

      newWs.onerror = (error) => {
        console.error('WebSocket Error:', error);
        // S·ª± ki·ªán onclose s·∫Ω ƒë∆∞·ª£c g·ªçi sau l·ªói, kh√¥ng c·∫ßn ƒë√≥ng ho·∫∑c reset ref ·ªü ƒë√¢y
      };

      // G√°n k·∫øt n·ªëi m·ªõi v√†o ref
      ws.current = newWs;

    } else if (!currentUser && ws.current && ws.current.readyState === WebSocket.OPEN) {
       // N·∫øu user ƒë√£ logout nh∆∞ng ws v·∫´n m·ªü -> ƒë√≥ng n√≥
        console.log('üîå Closing WebSocket connection due to logout');
        ws.current.close();
    }


    // Cleanup function: ƒê·∫£m b·∫£o ƒë√≥ng k·∫øt n·ªëi khi component unmount
    return () => {
      // L·∫•y ra websocket hi·ªán t·∫°i t·ª´ ref tr∆∞·ªõc khi cleanup
      const currentWs = ws.current;
      if (currentWs && currentWs.readyState === WebSocket.OPEN) {
        console.log('üîå Closing WebSocket connection on component unmount');
        currentWs.close();
      }
    };
    // Ch·ªâ ch·∫°y l·∫°i effect n√†y khi currentUser thay ƒë·ªïi
  }, [currentUser]);

  const handleLoginSuccess = (userData) => {
    localStorage.setItem('user', JSON.stringify(userData));
    setCurrentUser(userData);
  };

  const handleLogout = () => {
     // ƒê√≥ng WebSocket tr∆∞·ªõc khi x√≥a user
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      console.log('üîå Closing WebSocket connection on logout');
      ws.current.close();
    }
    // ws.current s·∫Ω t·ª± reset th√†nh null trong s·ª± ki·ªán onclose
    localStorage.removeItem('user');
    setCurrentUser(null);
  };

  // Component b·∫£o v·ªá route theo vai tr√≤
  const ProtectedRoute = ({ children, allowedRoles }) => {
    if (!currentUser) {
      return <Navigate to="/login" replace />;
    }

    if (allowedRoles && !allowedRoles.includes(currentUser.vai_tro)) {
      // N·∫øu kh√¥ng c√≥ quy·ªÅn truy c·∫≠p, chuy·ªÉn v·ªÅ trang m·∫∑c ƒë·ªãnh c·ªßa vai tr√≤
      return <Navigate to="/" replace />;
    }

    return children;
  };

  return (
    <Router>
      <Routes>
        <Route
          path="/login"
          element={currentUser ? <Navigate to="/" replace /> : <LoginPage onLoginSuccess={handleLoginSuccess} />}
        />

        {/* Route ƒë∆∞·ª£c b·∫£o v·ªá, d√πng chung Layout */}
        <Route
          element={
            <ProtectedRoute>
               {/* Truy·ªÅn notifications v√†o Layout n·∫øu mu·ªën hi·ªÉn th·ªã ·ªü ƒë√≥ */}
              <Layout user={currentUser} onLogout={handleLogout} notifications={notifications} />
            </ProtectedRoute>
          }
        >
          {/* Route m·∫∑c ƒë·ªãnh - ƒëi·ªÅu h∆∞·ªõng theo vai tr√≤ */}
          <Route index element={<DefaultPageBasedOnRole role={currentUser?.vai_tro} />} />

          {/* Routes cho QU·∫¢N L√ù */}
          <Route path="dashboard" element={
            <ProtectedRoute allowedRoles={['quan_ly']}>
              <Dashboard />
            </ProtectedRoute>
          } />
          <Route path="hocsinh" element={
            <ProtectedRoute allowedRoles={['quan_ly']}>
              <QuanLyHocSinh />
            </ProtectedRoute>
          } />
          <Route path="taixe" element={
            <ProtectedRoute allowedRoles={['quan_ly']}>
              <QuanLyTaiXe />
            </ProtectedRoute>
          } />
          <Route path="xebuyt" element={
            <ProtectedRoute allowedRoles={['quan_ly']}>
              <QuanLyXeBus />
            </ProtectedRoute>
          } />
          <Route path="tuyenduong" element={
            <ProtectedRoute allowedRoles={['quan_ly']}>
              <QuanLyTuyenDuong />
            </ProtectedRoute>
          } />
          <Route path="tram" element={
            <ProtectedRoute allowedRoles={['quan_ly']}>
              <QuanLyTram />
            </ProtectedRoute>
          } />
          <Route path="guithongbaoph" element={
            <ProtectedRoute allowedRoles={['quan_ly']}>
              <GuiThongBao />
            </ProtectedRoute>
          } />
          {/* Routes cho T√ÄI X·∫æ */}
          <Route path="diemdanh" element={
            <ProtectedRoute allowedRoles={['tai_xe']}>
              <DiemDanhHocSinh />
            </ProtectedRoute>
          } />

          {/* Routes l·ªãch tr√¨nh - ph√¢n bi·ªát theo vai tr√≤ */}
          <Route path="lichtrinh" element={
            <ProtectedRoute allowedRoles={['quan_ly', 'tai_xe']}>
              {currentUser?.vai_tro === 'quan_ly' ? <QuanLyLichTrinh /> : <XemLichTrinh />}
            </ProtectedRoute>
          } />

          {/* Routes chung cho nhi·ªÅu vai tr√≤ */}
          <Route path="theodoixe" element={
            <ProtectedRoute allowedRoles={['quan_ly', 'tai_xe', 'phu_huynh']}>
              <TheoDoiXeBuyt />
            </ProtectedRoute>
          } />
          <Route path="thongbao" element={
             <ProtectedRoute allowedRoles={['tai_xe', 'phu_huynh']}>
                {/* Truy·ªÅn notifications ho·∫∑c d√πng context/state management kh√°c */}
                <ThongBao initialNotifications={notifications} />
             </ProtectedRoute>
           } />

          {/* Routes cho PH·ª§ HUYNH */}
          <Route path="thongtinphuhuynh" element={
            <ProtectedRoute allowedRoles={['phu_huynh']}>
              <ThongTinPhuHuynh />
            </ProtectedRoute>
          } />

          {/* Route 404 */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Route>
      </Routes>
    </Router>
  );
}

// Helper component ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang m·∫∑c ƒë·ªãnh c·ªßa t·ª´ng vai tr√≤
const DefaultPageBasedOnRole = ({ role }) => {
  switch (role) {
    case 'quan_ly':
      return <Navigate to="/dashboard" replace />;
    case 'tai_xe':
      return <Navigate to="/diemdanh" replace />;
    case 'phu_huynh':
      return <Navigate to="/theodoixe" replace />;
    default:
      // N·∫øu kh√¥ng c√≥ vai tr√≤ (ch∆∞a ƒëƒÉng nh·∫≠p xong), c√≥ th·ªÉ t·∫°m th·ªùi kh√¥ng render g√¨ ho·∫∑c redirect login
       // Ho·∫∑c tr·∫£ v·ªÅ trang login n·∫øu ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c vai tr√≤
      return <Navigate to="/login" replace />;
  }
};

export default App;

